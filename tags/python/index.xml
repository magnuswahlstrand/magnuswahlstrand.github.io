<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on wahlstrand.dev</title>
    <link>https://magnuswahlstrand.github.io/tags/python/</link>
    <description>Recent content in python on wahlstrand.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 07 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://magnuswahlstrand.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQLALchemy: One to many-relationships</title>
      <link>https://magnuswahlstrand.github.io/post/2022-03-07-one-to-many/</link>
      <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/post/2022-03-07-one-to-many/</guid>
      <description>&lt;p&gt;When learning a new tech stack, the database layer is usually one of the harder and the most fun activities. In my current project, our services are written in Python, and most of them use PostgreSQL for storage.
For Python, the most commonly used SQL library is &lt;a href=&#34;https://www.sqlalchemy.org/&#34;&gt;SQLAlchemy&lt;/a&gt;. It is usually used as an Objectâ€“relational mapping (&lt;a href=&#34;https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping&#34;&gt;ORM&lt;/a&gt;). While I have used Python in the past, I haven&amp;rsquo;t used either SQLAlchemy or ORMs very much in production. In this article, I will explore how to model relationships in SQLAlchemy.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
