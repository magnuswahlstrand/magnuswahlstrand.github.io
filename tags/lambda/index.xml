<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lambda on wahlstrand.dev</title>
    <link>https://magnuswahlstrand.github.io/tags/lambda/</link>
    <description>Recent content in lambda on wahlstrand.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 09 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://magnuswahlstrand.github.io/tags/lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Even simpler way of calling your AWS backend</title>
      <link>https://magnuswahlstrand.github.io/articles/2022-07-09-trpc-with-lambda-function-urls-on-aws/</link>
      <pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2022-07-09-trpc-with-lambda-function-urls-on-aws/</guid>
      <description>&lt;p&gt;A few weeks I wrote a post about using &lt;a href=&#34;https://trpc.io/&#34;&gt;tRPC&lt;/a&gt; to get type safe requests between a web client and the
server. It turns out that there is an &lt;em&gt;&lt;strong&gt;even simpler&lt;/strong&gt;&lt;/em&gt; way of calling your AWS backend (still using tRPC) ðŸ¤¯!&lt;/p&gt;
&lt;p&gt;In this post I will show you how to use tRPC and a Lambda function
with &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html&#34;&gt;Lambda Function URLs&lt;/a&gt; to create a ToDo-app for my
terminal. The backend is deployed to AWS using the &lt;a href=&#34;https://sst.dev/&#34;&gt;Serverless Stack&lt;/a&gt;.&lt;/p&gt;

    &lt;script src=&#34;https://magnuswahlstrand.github.io/js/asciinema-player.min.ad5df285ba10c3f22e8e6c659e7ba5b3.js&#34;&gt;&lt;/script&gt;
    &lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;https://magnuswahlstrand.github.io/css/asciinema-player.min.769c38c8638dc8c9915bb6e6ef523e8b.css&#34; /&gt;

&lt;div id=&#34;demo1&#34;&gt;&lt;/div&gt;
&lt;script&gt;
AsciinemaPlayer.create(&#34;/casts/trpc-with-lambda-function-urls-on-aws/ts-prompt.cast&#34;, document.getElementById(&#39;demo1&#39;), {
&#34;autoplay&#34;: &#34;true&#34;,&#34;cols&#34;: &#34;80&#34;,&#34;loop&#34;: &#34;true&#34;,&#34;poster&#34;: &#34;npt:0:04&#34;,&#34;rows&#34;: &#34;14&#34;,
});
&lt;/script&gt;
&lt;noscript&gt;&lt;blockquote&gt;&lt;p&gt;To run this asciicast without javascript, use &lt;code&gt;asciinema play https://magnuswahlstrand.github.io/casts/trpc-with-lambda-function-urls-on-aws/ts-prompt.cast&lt;/code&gt; with &lt;a href=&#34;https://asciinema.org/&#34;&gt;Asciinema&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/noscript&gt;</description>
    </item>
    
    <item>
      <title>Event-based apps with Go and EventBridge</title>
      <link>https://magnuswahlstrand.github.io/articles/2022-06-26-event-based-system-on-aws/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2022-06-26-event-based-system-on-aws/</guid>
      <description>&lt;p&gt;In this post I will build a small &lt;a href=&#34;https://en.wikipedia.org/wiki/Event-driven_architecture&#34;&gt;event-driven system&lt;/a&gt; with Go. It will be serverless app with an API Gateway in front. I will use &lt;a href=&#34;https://aws.amazon.com/eventbridge/&#34;&gt;AWS EventBridge&lt;/a&gt; as message bus that serves as glue between our components and the app will be deployed using &lt;a href=&#34;https://sst.dev/&#34;&gt;Serverless Stack &lt;/a&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://magnuswahlstrand.github.io/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:70%&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://magnuswahlstrand.github.io/img/event-based-system-on-aws/teaser.png&#34; alt=&#34;/img/event-based-system-on-aws/teaser.png&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://magnuswahlstrand.github.io/img/event-based-system-on-aws/teaser.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
  </channel>
</rss>
