<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wahlstrand.dev</title>
    <link>https://magnuswahlstrand.github.io/</link>
    <description>Recent content on wahlstrand.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 09 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://magnuswahlstrand.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Even simpler way of calling your AWS backend</title>
      <link>https://magnuswahlstrand.github.io/articles/2022-07-09-trpc-with-lambda-function-urls-on-aws/</link>
      <pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2022-07-09-trpc-with-lambda-function-urls-on-aws/</guid>
      <description>&lt;p&gt;A few weeks I wrote a post about using &lt;a href=&#34;https://trpc.io/&#34;&gt;tRPC&lt;/a&gt; to get type safe requests between a web client and the
server. It turns out that there is an &lt;em&gt;&lt;strong&gt;even simpler&lt;/strong&gt;&lt;/em&gt; way of calling your AWS backend (still using tRPC) ðŸ¤¯!&lt;/p&gt;
&lt;p&gt;In this post I will show you how to use tRPC and a Lambda function
with &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html&#34;&gt;Lambda Function URLs&lt;/a&gt; to create a ToDo-app for my
terminal. The backend is deployed to AWS using the &lt;a href=&#34;https://sst.dev/&#34;&gt;Serverless Stack&lt;/a&gt;.&lt;/p&gt;

    &lt;script src=&#34;https://magnuswahlstrand.github.io/js/asciinema-player.min.ad5df285ba10c3f22e8e6c659e7ba5b3.js&#34;&gt;&lt;/script&gt;
    &lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;https://magnuswahlstrand.github.io/css/asciinema-player.min.769c38c8638dc8c9915bb6e6ef523e8b.css&#34; /&gt;

&lt;div id=&#34;demo1&#34;&gt;&lt;/div&gt;
&lt;script&gt;
AsciinemaPlayer.create(&#34;/casts/trpc-with-lambda-function-urls-on-aws/ts-prompt.cast&#34;, document.getElementById(&#39;demo1&#39;), {
&#34;autoplay&#34;: &#34;true&#34;,&#34;cols&#34;: &#34;80&#34;,&#34;loop&#34;: &#34;true&#34;,&#34;poster&#34;: &#34;npt:0:04&#34;,&#34;rows&#34;: &#34;14&#34;,
});
&lt;/script&gt;
&lt;noscript&gt;&lt;blockquote&gt;&lt;p&gt;To run this asciicast without javascript, use &lt;code&gt;asciinema play https://magnuswahlstrand.github.io/casts/trpc-with-lambda-function-urls-on-aws/ts-prompt.cast&lt;/code&gt; with &lt;a href=&#34;https://asciinema.org/&#34;&gt;Asciinema&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/noscript&gt;</description>
    </item>
    
    <item>
      <title>Event-based apps with Go and EventBridge</title>
      <link>https://magnuswahlstrand.github.io/articles/2022-06-26-event-based-system-on-aws/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2022-06-26-event-based-system-on-aws/</guid>
      <description>&lt;p&gt;In this post I will build a small &lt;a href=&#34;https://en.wikipedia.org/wiki/Event-driven_architecture&#34;&gt;event-driven system&lt;/a&gt; with Go. It will be serverless app with an API Gateway in front. I will use &lt;a href=&#34;https://aws.amazon.com/eventbridge/&#34;&gt;AWS EventBridge&lt;/a&gt; as message bus that serves as glue between our components and the app will be deployed using &lt;a href=&#34;https://sst.dev/&#34;&gt;Serverless Stack &lt;/a&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://magnuswahlstrand.github.io/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:70%&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://magnuswahlstrand.github.io/img/event-based-system-on-aws/teaser.png&#34; alt=&#34;/img/event-based-system-on-aws/teaser.png&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://magnuswahlstrand.github.io/img/event-based-system-on-aws/teaser.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>Typesafe serverless API with tRPC</title>
      <link>https://magnuswahlstrand.github.io/articles/2022-06-19-typesafe-http-client-serverless/</link>
      <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2022-06-19-typesafe-http-client-serverless/</guid>
      <description>&lt;p&gt;I have been using React and &lt;a href=&#34;https://react-query.tanstack.com/&#34;&gt;React Query&lt;/a&gt; for most of my hobby projects lately. I
mainly use Typescript, and one of main pain points for me with React Query is the amount of work needed to get the
typing right.&lt;/p&gt;
&lt;p&gt;Yesterday, &lt;a href=&#34;https://twitter.com/thdxr&#34;&gt;Dax Raad&lt;/a&gt; from the &lt;a href=&#34;https://sst.dev/&#34;&gt;Serverless Stack&lt;/a&gt; team pointed
me in the direction of the &lt;a href=&#34;https://trpc.io/&#34;&gt;tRPC&lt;/a&gt; project. It is a framework creating typesafe client and server code
in Typescript. &lt;strong&gt;tRPC&lt;/strong&gt; is a great fit for me as it has&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;great integration with &lt;a href=&#34;https://trpc.io/docs/react&#34;&gt;React and React Query&lt;/a&gt; and&lt;/li&gt;
&lt;li&gt;an adapter for &lt;a href=&#34;https://trpc.io/docs/aws-lambda&#34;&gt;AWS Lambda and the AWS Gateway&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this post, I will show you how to set up a typesafe API in &lt;strong&gt;Typescript&lt;/strong&gt;, with &lt;strong&gt;React&lt;/strong&gt; in the frontend with &lt;strong&gt;AWS
Lambda&lt;/strong&gt; in the backend using &lt;strong&gt;tRPC&lt;/strong&gt; as the glue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://magnuswahlstrand.github.io/img/typesafe-http-client-serverless/setup.png&#34; alt=&#34;setup&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Pub/Sub with dead letter queues</title>
      <link>https://magnuswahlstrand.github.io/articles/2022-04-23-pubsub-with-dlq/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2022-04-23-pubsub-with-dlq/</guid>
      <description>&lt;p&gt;Today we will build a simple system with Google Pub/Sub to explore the basic components needed for an asynchronous &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34;&gt;publisher-subscriber pattern&lt;/a&gt;. We will use Terraform for creating the infrastucture, and go for the application code. All code &lt;a href=&#34;https://github.com/magnuswahlstrand/blog-code/tree/main/gcp-pubsub-with-dlq&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the end of this post, you should know&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is a topic?&lt;/li&gt;
&lt;li&gt;What is a subscription?&lt;/li&gt;
&lt;li&gt;Why do I need a dead letter queue?&lt;/li&gt;
&lt;li&gt;How do I retry message from my dead letter queue?&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Tiny fullstack app</title>
      <link>https://magnuswahlstrand.github.io/articles/2022-04-15-react-fiber-mongo/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2022-04-15-react-fiber-mongo/</guid>
      <description>&lt;p&gt;In this post I will build a simple app using a combination of tools and libraries that I&amp;rsquo;m exploring.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React&lt;/strong&gt; (&lt;a href=&#34;https://react-query.tanstack.com/&#34;&gt;React-Query&lt;/a&gt;, &lt;a href=&#34;https://mantine.dev/&#34;&gt;Mantine&lt;/a&gt; for UI)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Go&lt;/strong&gt; (&lt;a href=&#34;https://github.com/gofiber/fiber&#34;&gt;Fiber&lt;/a&gt; for routing, &lt;a href=&#34;https://github.com/qiniu/qmgo&#34;&gt;Qmgo&lt;/a&gt; db-driver)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The goal is to create a simple User List with basic filtering:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://magnuswahlstrand.github.io/img/react-fiber-mongo/search.gif&#34; alt=&#34;Search&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Excalidraw</title>
      <link>https://magnuswahlstrand.github.io/articles/2022-04-12-excalidraw-tips-andtricks/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2022-04-12-excalidraw-tips-andtricks/</guid>
      <description>&lt;p&gt;Communication in a &amp;ldquo;mostly remote&amp;rdquo; workplace can be difficult. Lucky for us, there are new tools that can help us collaborate and share knowledge online!&lt;/p&gt;
&lt;p&gt;A tool that I have used and enjoyed the last few years is &lt;a href=&#34;https://excalidraw.com/&#34;&gt;Excalidraw&lt;/a&gt;. Description from their homepage:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Virtual whiteboard for sketching hand-drawn like diagrams.
Collaborative and end-to-end encrypted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this post I will go through a few of Exalidraw&amp;rsquo;s features that are useful and great.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQLALchemy: One to many-relationships</title>
      <link>https://magnuswahlstrand.github.io/articles/2022-03-07-one-to-many/</link>
      <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2022-03-07-one-to-many/</guid>
      <description>&lt;p&gt;When learning a new tech stack, the database layer is usually one of the harder and the most fun activities. In my current project, our services are written in Python, and most of them use PostgreSQL for storage.
For Python, the most commonly used SQL library is &lt;a href=&#34;https://www.sqlalchemy.org/&#34;&gt;SQLAlchemy&lt;/a&gt;. It is usually used as an Objectâ€“relational mapping (&lt;a href=&#34;https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping&#34;&gt;ORM&lt;/a&gt;). While I have used Python in the past, I haven&amp;rsquo;t used either SQLAlchemy or ORMs very much in production. In this article, I will explore how to model relationships in SQLAlchemy.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Audit tables in Postgres</title>
      <link>https://magnuswahlstrand.github.io/articles/2022-02-27-audit-logs-in-postgres/</link>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2022-02-27-audit-logs-in-postgres/</guid>
      <description>&lt;p&gt;A while back I watched &lt;a href=&#34;https://www.youtube.com/watch?v=j6ow-UemzBc&#34;&gt;this video&lt;/a&gt; (summary &lt;a href=&#34;https://www.infoq.com/news/2018/07/bryzek-microservice-architecture/&#34;&gt;here&lt;/a&gt;) with Michael Bryzek (Flow.io, Gilt). He presented how they do &lt;a href=&#34;https://en.wikipedia.org/wiki/Change_data_capture&#34;&gt;Change Data Capture&lt;/a&gt; (CDC) with PostgreSQL and DynamoDB. One goal with CDC is that changes to databases rows and tables can be propagated to other parts of the system. In microservices systems, this can be used to build read-projections, or just keep local caches of data.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/&#34;&gt;Postgres&lt;/a&gt; is one of my favorite databases to work with in production (and probably the one I most experience with), but I have little or experience working features such as PostgreSQL triggers and stored procedures. In this blog post, I explore how to use triggers to create a simple audit table in Postgres.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running Google Pub/Sub locally</title>
      <link>https://magnuswahlstrand.github.io/articles/2021-07-11-testing-pubsub-locally/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2021-07-11-testing-pubsub-locally/</guid>
      <description>&lt;p&gt;I have recently started using Google&amp;rsquo;s event queue &amp;ldquo;&lt;a href=&#34;https://cloud.google.com/pubsub&#34;&gt;&lt;strong&gt;Cloud Pub/Sub&lt;/strong&gt;&lt;/a&gt;&amp;rdquo; for a few projects at work, and I enjoyed how straightforward it is to configure and use in production.  Their documentation is usually great, but often misses how to tie everything for your local environment.&lt;/p&gt;
&lt;p&gt;Here is a quick guide how I set up my integration test locally using the &lt;strong&gt;Pub/Sub&lt;/strong&gt; emulator. Code examples are written in Go.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ACID transactions</title>
      <link>https://magnuswahlstrand.github.io/articles/2021-03-12-acid-transactions/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2021-03-12-acid-transactions/</guid>
      <description>&lt;p&gt;The last few days, I&amp;rsquo;ve been down the rabbit hole of learning more about Postgres and databases in general. Here are a few things I have explored, along with useful resources. Let&amp;rsquo;s start with the basics.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>State machines in Go</title>
      <link>https://magnuswahlstrand.github.io/articles/2020-10-31-state-machines-in-go/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2020-10-31-state-machines-in-go/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s implement a simple state machine in Go that is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;easy to understand&lt;/li&gt;
&lt;li&gt;easy to extend&lt;/li&gt;
&lt;li&gt;easy to test&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The full code is available in the &lt;a href=&#34;https://github.com/magnuswahlstrand/state-machines-in-go&#34;&gt;repo&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting started with sqlc</title>
      <link>https://magnuswahlstrand.github.io/articles/2020-10-25-getting-started-with-sqlc/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2020-10-25-getting-started-with-sqlc/</guid>
      <description>&lt;p&gt;&lt;code&gt;sqlc&lt;/code&gt; is a command line tool to generate type-safe Go code, based on SQL queries and schemas.
In this article I cover how to set up a very useful application that insert animals (data about them not actual animals) to a database, and keeps a list of them forever!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://magnuswahlstrand.github.io/img/getting-started-with-sqlc/dogs.jpeg&#34; alt=&#34;Click bait dogs. Photo by Chevanon Photography&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Useful Terraform snippets</title>
      <link>https://magnuswahlstrand.github.io/fragments/2021-04-02-useful-terraform-snippets/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/fragments/2021-04-02-useful-terraform-snippets/</guid>
      <description>&lt;p&gt;A while back I was introduced to &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt; by a colleague. Since then, I have started using it more and more both at work and for my own projects.&lt;/p&gt;
&lt;p&gt;Terraform is a declarative tool for managing infrastructure. You specify what resources and resource state you want, in configuration files, and Terraform gets it to that state. I have used some of &lt;a href=&#34;https://www.hashicorp.com/&#34;&gt;HashiCorp&amp;rsquo;s&lt;/a&gt; tools in the past (Consul, Vault, &amp;hellip;) and they all have great user experience and good documentation, and Terraform is no exception.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using an ORM with Go</title>
      <link>https://magnuswahlstrand.github.io/fragments/2021-03-06-using-an-orm-with-go/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/fragments/2021-03-06-using-an-orm-with-go/</guid>
      <description>&lt;p&gt;A while back, when reading &lt;a href=&#34;https://twitter.com/brandur&#34;&gt;@brandur&amp;rsquo;s&lt;/a&gt; article &lt;a href=&#34;https://brandur.org/http-transactions&#34;&gt;Using Atomic Transactions&lt;/a&gt;, I realised that I have actually never used an ORM (&lt;a href=&#34;https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping&#34;&gt;wiki&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;When I started web programming in Go, I quickly adopted the community notion (from forums, and presentations) that using large frameworks is frowned upon. Was I wrong?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Slack: Search bar</title>
      <link>https://magnuswahlstrand.github.io/articles/2020-01-12-search-bar-overlay/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2020-01-12-search-bar-overlay/</guid>
      <description>&lt;p&gt;I use Slack a lot in my day-to-day work, and I think the UI is excellent. One of the things I like the most is the quick navigation/search bar that makes navigation the channels effortless.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://magnuswahlstrand.github.io/img/slack-clone/6_end_result.gif&#34; alt=&#34;Search overlay&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this article I try to recreate the basic look and functionality of it using HTML, Bootstrap and jQuery. I will not focus on the backend part, but rather getting the right look and feel.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automatic key rotation on Heroku</title>
      <link>https://magnuswahlstrand.github.io/articles/2019-11-30-heroku-secrets-rotation/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2019-11-30-heroku-secrets-rotation/</guid>
      <description>&lt;p&gt;Automatic key rotation is a simple way of improving the security of an app.&lt;/p&gt;
&lt;p&gt;In this example, I have two services running on &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;. The goal is that the API key in &lt;code&gt;service-1&lt;/code&gt; one can be rotated smoothly (every 2 week), while &lt;code&gt;service-2&lt;/code&gt; uses the rotating API keys to connect to &lt;code&gt;service-1&lt;/code&gt;.
We will use the Heroku plugin &lt;a href=&#34;https://elements.heroku.com/addons/securekey&#34;&gt;securekey&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Websockets on Heroku</title>
      <link>https://magnuswahlstrand.github.io/articles/2019-10-19-heroku-websockets/</link>
      <pubDate>Sat, 19 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2019-10-19-heroku-websockets/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s create a simple web server that runs on &lt;a href=&#34;https://www.heroku.com&#34;&gt;Heroku&lt;/a&gt; and accepts websockets connections.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>App shortcuts</title>
      <link>https://magnuswahlstrand.github.io/articles/2019-10-13-app-shortcuts/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2019-10-13-app-shortcuts/</guid>
      <description>&lt;p&gt;This article covers how to create Android app shortcuts like the one below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://magnuswahlstrand.github.io/img/app-shortcuts/target.png&#34; alt=&#34;Target&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Push Notifications pt.2</title>
      <link>https://magnuswahlstrand.github.io/articles/2019-10-06-notifications/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2019-10-06-notifications/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://magnuswahlstrand.github.io/articles/2019-10-05-push-notifications/&#34;&gt;Part 1&lt;/a&gt; we learned how to send push notifications from &lt;a href=&#34;https://console.firebase.google.com&#34;&gt;Firebase Cloud Messaging console&lt;/a&gt;. There are a number of improvements we can make:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#show-notification-in-foregrounded-app&#34;&gt;Show notification when the app in in the foreground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#go-to-specific-view&#34;&gt;Go to a specific view in the app when clicked&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Buttons directly in the notifications&lt;/li&gt;
&lt;li&gt;Keep the notification open while the app is open&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s get started!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Push Notifications pt.1</title>
      <link>https://magnuswahlstrand.github.io/articles/2019-10-05-push-notifications/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2019-10-05-push-notifications/</guid>
      <description>&lt;p&gt;I am currently learning how to create Android apps using Kotlin, and today I exploring how to send push notifications!&lt;/p&gt;
&lt;p&gt;The goal of this guide is to build a simple Android app and send a &amp;ldquo;Hello, world&amp;rdquo; push notification. The end result will look something like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://magnuswahlstrand.github.io/img/push-notifications/1_hello_push.png&#34; alt=&#34;End result&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2D animation: Screen shake</title>
      <link>https://magnuswahlstrand.github.io/articles/2019-04-29-screen-shake/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2019-04-29-screen-shake/</guid>
      <description>&lt;p&gt;A good way of improving the feel of a game is to add screen shake, when a player gets hit or when something heavy lands on the ground. I have implemented two ways of doing this, one &lt;em&gt;simple&lt;/em&gt; and one &lt;em&gt;nice&lt;/em&gt;. The end result will look something like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://magnuswahlstrand.github.io/img/screenshake/shake.gif&#34; alt=&#34;End result&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2D animation: Transitions</title>
      <link>https://magnuswahlstrand.github.io/articles/2019-04-28-2d-transitions/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/articles/2019-04-28-2d-transitions/</guid>
      <description>&lt;p&gt;The other day, I watched a a playthrough of the 2D platformer &lt;a href=&#34;https://yachtclubgames.com/shovel-knight/&#34;&gt;Shovel Knight&lt;/a&gt;. It has a couple of nice screen transitions that I wanted to recreate using Go and the 2D game library &lt;a href=&#34;https://ebiten.org/&#34;&gt;Ebiten&lt;/a&gt;. Here is the end result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://magnuswahlstrand.github.io/img/2d-transitions/final.gif&#34; alt=&#34;End result&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I have borrowed the background images and scoreboard in the from &lt;a href=&#34;https://yachtclubgames.com/shovel-knight/&#34;&gt;Shovel Knight&lt;/a&gt; itself.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://magnuswahlstrand.github.io/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/page/about/</guid>
      <description>My name is Magnus Wahlstrand. I am a software engineer, based in Stockholm, Sweden. I love programming.
I enjoy developing things that are easy to maintain and observe long term. If shortcuts are needed, I believe in taking the time to clean up afterwards to keep the quality of the code base high over time.
Qualities I have the following qualities:
 Stubborn Passionate Hard-working Lazy Curious  Time line  1987: Born in Kalmar, Sweden 1999: Started my career as a Java developer 2003: Got a summer job testing staplers 2004: Started playing bass guitar 2005: RSI 2006: Moved to Gothenburg, Sweden 2009: Studied mathematics and electronics at N7 in France 2013: Lived in China 2018: Started programming in Go 2019: Worked at a fintech startup in Stockholm 2021: My son was born 2023: ?</description>
    </item>
    
    <item>
      <title>What I&#39;m Doing Now</title>
      <link>https://magnuswahlstrand.github.io/page/now/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://magnuswahlstrand.github.io/page/now/</guid>
      <description>Itâ€™s 2022. The world is no longer in lockdown. Iâ€™m working from home from my house outside of Stockholm. My son is soon one year old.
Some things Iâ€™m working on:
 Learning Python, and SQLAlchemy Take a walk every day Try a new recipe every week Write a new article per month   This is a now page, and if you have your own site, you can make one, too!</description>
    </item>
    
  </channel>
</rss>
